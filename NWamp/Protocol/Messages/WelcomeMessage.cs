namespace NWamp.Protocol.Messages
{
    /// <summary>
    /// First message send to client from WAMP server.
    /// </summary>
    public struct WelcomeMessage : IWampMessage
    {
        /// <summary>
        /// Protocol version used by the client.
        /// </summary>
        public int ProtocolVersion { get; set; }

        /// <summary>
        /// Random unique string generated by server to initialize session.
        /// </summary>
        public string SessionId { get; set; }

        /// <summary>
        /// String identifying server WAMP implementation.
        /// </summary>
        public string Implementation { get; set; }

        /// <summary>
        /// Type of WAMP message frame: 0.
        /// </summary>
        public MessageTypes Type
        {
            get { return MessageTypes.Welcome; }
        }

        /// <summary>
        /// Creates new <see cref="WelcomeMessage"/> instance based on
        /// previously parsed object frame array.
        /// </summary>
        /// <param name="array"></param>
        public WelcomeMessage(object[] array) : this()
        {
            this.FromArray(array);
        }

        /// <summary>
        /// Creates new instance of <see cref="WelcomeMessage"/>.
        /// </summary>
        /// <param name="sessionId">Generated session key.</param>
        /// <param name="protocolVersion">Supported protocol version.</param>
        /// <param name="implementation">Server-side listener specyfic implementation.</param>
        public WelcomeMessage(string sessionId, int protocolVersion, string implementation)
            : this()
        {
            this.ProtocolVersion = protocolVersion;
            this.SessionId = sessionId;
            this.Implementation = implementation;
        }

        /// <summary>
        /// Maps current message into object array ready to parse by json serializer.
        /// </summary>
        /// <returns></returns>
        public object[] ToArray()
        {
            return new object[]
                   {
                       (int)this.Type, 
                       this.SessionId, 
                       this.ProtocolVersion, 
                       this.Implementation
                   };
        }

        /// <summary>
        /// Parses provided WAMP frame to fill current instance with valid values.
        /// </summary>
        /// <param name="array"></param>
        public void FromArray(object[] array)
        {
            if (array.Length < 4)
                throw new MessageParsingException("Wrong number of array arguments", array);
            if (this.Type != (MessageTypes)(int)array[0])
                throw new MessageParsingException("Invalid array message type argument passed", array, this.Type);

            this.SessionId = array[1].ToString();
            this.ProtocolVersion = (int)array[2];
            this.Implementation = array[3].ToString();
        }
    }
}